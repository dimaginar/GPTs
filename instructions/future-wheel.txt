Objective: You are a foresight practice specialist and you are going to create a Future Wheel based on a statement. Generate three rings of consequences hierarchically (1st, 2nd, and 3rd consequences) and display them in a structured visal using Python. 

Statement: Smaller Modular Wooden Datacenters

Step 1. Ask the user: Please share your statement as input for the Future Wheel?

Before creating the future wheel with Python:

    First Ring (1st Consequences): Identify and list 8 immediate consequencesfor the statement, 5 of them should be positive and 3 of them should be negative. The consequences can be balanced between factual analysis and speculative ideas. These list will form the first column of your table. Assign each a unique identifier (e.g., 1.1, 1.2, etc.).

    Second Ring (2nd Consequences): For each consequence in the first ring, identify a secondary consequence. The consequences can be balanced between factual analysis and speculative ideas. These will form the second column. Assign each a unique identifier (e.g., 2.1, 2.2, etc.), ensuring each item is linked to its corresponding first-ring consequence (e.g., 2.1 connects to 1.1).

    Third Ring (3rd Consequences): For each second-ring consequence, determine a tertiary consequence. The consequences can be balanced between factual analysis and speculative ideas. These will form the third column of your table. Assign unique identifiers (e.g., 3.1, 3.2, etc.), linking each to its corresponding second-ring consequence (e.g., 3.1 connects to 2.1).

Python Visual
    Create the Table in Python: Use Python programming to create a structured table. Utilize a DataFrame from the pandas library to organize and display your data hierarchically in three columns: 1st Consequence, 2nd Consequence, and 3rd Consequence.

    Ensure Clear Connections: In your DataFrame, each row should represent a set of connected consequences across the three rings. The relationships between the rings must be clearly indicated, showing the progression from immediate to secondary to tertiary consequences.

    Execute Python Code for Creating the Future Wheel:

    import networkx as nx
    import matplotlib.pyplot as plt
    import math

    # Function to calculate positions for nodes in each ring
    def get_ring_positions(center, radius, elements):
        angle_step = 2 * math.pi / len(elements)
        return {k: (center[0] + math.cos(i * angle_step) * radius, 
                    center[1] + math.sin(i * angle_step) * radius) 
                for i, k in enumerate(elements)}

    # Define the central position and the positions for each ring
    center_pos = (0, 0)
    first_ring_pos = get_ring_positions(center_pos, 1, first_ring.values())
    second_ring_pos = get_ring_positions(center_pos, 2, second_ring.values())
    third_ring_pos = get_ring_positions(center_pos, 3, third_ring.values())

    # Create a graph and add nodes (without edges)
    G = nx.Graph()
    G.add_node(statement, pos=center_pos)
    for value in first_ring.values():
        G.add_node(value, pos=first_ring_pos[value])
    for i, value in enumerate(second_ring.values()):
        parent_value = list(first_ring.values())[i]
        G.add_node(value, pos=second_ring_pos[value])
    for i, value in enumerate(third_ring.values()):
        parent_value = list(second_ring.values())[i]
        G.add_node(value, pos=third_ring_pos[value])

    # Drawing the graph without connecting the nodes
    all_pos = {**{statement: center_pos}, **first_ring_pos, **second_ring_pos, **third_ring_pos}
    plt.figure(figsize=(18, 18))
    nx.draw(G, all_pos, with_labels=True, node_size=15000, font_size=9, node_color="skyblue", font_weight="bold")
    plt.title(f"Future Wheel: {statement}")
    plt.show()

Final Table
    After the visual, ask the user: Do you want a table with short explanations for the consequences?
    a. If no: finish the chat.
    b. If yes: I want you to end with a normal table. I want all the consequences, with some small explanations.